AWSTemplateFormatVersion: "2010-09-09"
Description: A stack to support credit limit increases
Resources:
  LimitIncreaseStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      StateMachineName: limit-increase 
      DefinitionString: |-
        {
          "Comment": "A state machine to process credit limit increases",
          "StartAt": "FetchCustomerCreditAndFico",
          "States": {
            "FetchCustomerCreditAndFico": {
              "Type": "Parallel",
              "Next": "CreditLimitIncrease",
              "Branches": [
                {
                  "StartAt": "FetchCustomer",
                  "States": {
                    "FetchCustomer": {
                      "Type": "Task",
                      "Resource": "${FetchCustomerLambdaArn}",
                      "End": true,
                      "ResultPath": "$.customer"
                    }
                  }
                },
                {
                  "StartAt": "FetchCredit",
                  "States": {
                    "FetchCredit": {
                      "Type": "Task",
                      "Resource": "${FetchCreditLambdaArn}",
                      "End": true,
                      "ResultPath": "$.credit"
                    }
                  }
                },
                {
                  "StartAt": "FetchFico",
                  "States": {
                    "FetchFico": {
                      "Type": "Task",
                      "Resource": "${FetchFicoArn}",
                      "End": true,
                      "ResultPath": "$.fico"
                    }
                  }
                }
              ],
              "ResultPath": "$.result"
            },
            "CreditLimitIncrease": {
              "Type": "Task",
              "Resource": "${DetermineIncreaseArn}",
              "End": true,
              "ResultPath": "$.determination"
            }
          }
        }
      DefinitionSubstitutions:
        FetchCustomerLambdaArn: !GetAtt CustomerServiceLambda.Arn
        FetchCreditLambdaArn: !GetAtt CreditServiceLambda.Arn
        FetchFicoArn: !GetAtt FicoServiceLambda.Arn
        DetermineIncreaseArn: !GetAtt CreditLimitIncreaseDecisionServiceLambda.Arn
      RoleArn: !GetAtt LimitIncreaseStateMachineRole.Arn

  CustomerServiceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event, context) => ({
            firstName: "James",
            lastName: "Grant"
          })
      Description: A service to fetch customer data

  CreditServiceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          // create a random credit limit
          const getCreditLimit = (min, max) => Math.trunc(Math.random() * (max - min) + min);

          exports.handler = async (event, context) => ({
            limit: getCreditLimit(300, 50000)
          });
      Description: A service to fetch customer credit info 

  FicoServiceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          const min = 300;
          const max = 850;

          // generate a random credit score between min and max
          const getFicoScore = (minScore, maxScore) => Math.trunc(Math.random() * (maxScore - minScore) + minScore);

          exports.handler = async (event, context) => ({
            score: getFicoScore(min, max)
          });
      Description: A service to fetch the customers fico score

  CreditLimitIncreaseDecisionServiceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          const determineNewLimit = (currentLimit, percentageIncrease) =>
             currentLimit + (currentLimit * (1 * percentageIncrease));
          
          const determineIncrease = (isApproved, percentageIncrease, oldLimit) => {
            const newLimit = determineNewLimit(oldLimit, percentageIncrease);

            return {
              isApproved,
              percentageIncrease,
              oldLimit,
              newLimit
            }
          };

          // increase model:
          // 300-579: Poor        0% increase
          // 580-669: Fair        3% increase
          // 670-739: Good        5% increase
          // 740-799: Very good   7% increase
          // 800-850: Excellent   10% increase
          exports.handler = async (event, context) => {
            const { result } = event;

            // fetch each response from the event
            const [ customerResponse, creditResponse, ficoResponse ] = result;

            // grab the customers limit and fico score
            const { credit: { limit } } = creditResponse;
            const { fico: { score } } = ficoResponse;

            // run some simple logic based off of the requirements
            if(score <= 579) {
              return determineIncrease(false, 0, limit);
            } else if(score >= 580 && score <= 669) {
              return determineIncrease(true, .03, limit);
            } else if(score >= 670 && score <= 739) {
              return determineIncrease(true, .05, limit);
            } else if(score >= 740 && score <= 799) {
              return determineIncrease(true, .07, limit);
            } else if(score >= 800 && score <= 850 ) {
              return determineIncrease(true, .10, limit);
            }
          };
      Description: A service to determine if the limit can be increased

  LimitIncreaseStateMachineRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Description: A role for step function interaction
      RoleName: limit-increase-state-machine
      Policies:
        - PolicyName: limit-increase-state-machine
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: [
                !GetAtt CustomerServiceLambda.Arn,
                !GetAtt CreditServiceLambda.Arn,
                !GetAtt FicoServiceLambda.Arn,
                !GetAtt CreditLimitIncreaseDecisionServiceLambda.Arn
              ]

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*

